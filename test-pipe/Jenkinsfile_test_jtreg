pipeline {
    agent {
        label params.AGENT_LABEL
    }
    stages {
        stage('Prepare') {
            agent {
                dockerfile {
                    label params.AGENT_LABEL
                    dir params.DOCKER_DIR
                }
            }
            environment {
              SAPMACHINE_GIT_REPO = 'github.com/SAP/SapMachine.git'
            }
            steps {
                sh 'bash test-pipe/test_jtreg_prepare.sh'
            }
        }
        stage('Copy Artifacts') {
            agent {
                dockerfile {
                    label params.AGENT_LABEL
                    dir params.DOCKER_DIR
                }
            }
            steps {
                script {
                    step ([$class: 'CopyArtifact',
                    selector: buildParameter("${BUILD_SELECTOR}"),
                    projectName: JDK_BUILD_JOB,
                    filter: "build.tar.gz",
                    target: 'sapmachine']);
                }
                sh 'cd sapmachine && tar xzf build.tar.gz'
                script {
                    step ([$class: 'CopyArtifact',
                    projectName: JTREG_BUILD_JOB,
                    filter: "jtreg.zip",
                    target: 'sapmachine']);
                }
                sh 'cd sapmachine && unzip jtreg.zip'
            }
        }
        stage('Run jtreg') {
            agent {
                dockerfile {
                    label params.AGENT_LABEL
                    dir params.DOCKER_DIR
                    args '--ulimit nofile=90000:90000 --sysctl net.ipv4.ip_local_port_range="1024 65535" -h sapmachine.local --tmpfs /tmp:exec,mode=1777'
                }
            }
            environment {
              SCIMARK_2_CP = '/opt/scimark2/scimark2lib.jar'
            }
            steps {
                sh "cd sapmachine && bash ../test-pipe/run_jtreg.sh -l ${env.WORKSPACE}/sapmachine -h ${env.WORKSPACE}/sapmachine/jtreg -s ${params.test_suite} ${params.test_groups}  || true"
            }
        }
        stage('Publish jtreg report') {
            agent {
                dockerfile {
                    label params.AGENT_LABEL
                    dir params.DOCKER_DIR
                }
            }
            steps {
                sh '''
                    cd sapmachine
                    mkdir test_report
                    mv JTreport test_report
                    mv JTwork test_report
                '''
                sh "python lib/jtreg_to_junit.py sapmachine/test_report/JTreport/text/summary.txt junit_report.xml \"${params.test_suite}/${params.test_groups}\""

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: 'sapmachine/test_report',
                    reportFiles: 'JTreport/index.html',
                    reportName: 'JT Report'
                ]

                junit 'junit_report.xml'

                archive 'JTwork/**/hs_err_pid*.log'
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
