pipeline {
    agent {
        label params.AGENT_LABEL
    }
    stages {
        stage('Copy Artifacts') {
            steps {
                script {
                    step ([$class: 'CopyArtifact',
                    selector: buildParameter("${BUILD_SELECTOR}"),
                    projectName: JDK_BUILD_JOB,
                    filter: "test.zip",
                    target: 'sapmachine']);
                }
                sh 'cd sapmachine && unzip test.zip'
                sh '''
                    BUNDLE=`ls -al sapmachine/bundles/*jdk-*`
                    echo "${BUNDLE}"
                    unzip "${BUNDLE}"
                '''
                script {
                    step ([$class: 'CopyArtifact',
                    projectName: 'jtreg',
                    filter: "jtreg.zip",
                    target: 'sapmachine']);
                }
                sh 'cd sapmachine && unzip jtreg.zip'
            }
        }
        stage('Run jtreg') {
            environment {
              SCIMARK_2_CP = '/opt/scimark2/scimark2lib.jar'
            }
            steps {
                sh "bash test-pipe/run_jtreg.sh -l `pwd`/sapmachine -h `pwd`/sapmachine/jtreg -s ${params.test_suite} ${params.test_groups}  || true"
            }
        }
        stage('Publish jtreg report') {
            steps {
                junit 'JTwork/**/*.jtr.xml'
                sh '''
                    ls -l
                    mkdir test_report
                    ls -l
                    mv JTreport test_report
                    ls -l test_report/*
                    mv JTwork test_report
                '''
                sh "python lib/jtreg_to_junit.py test_report/JTreport/text/summary.txt junit_report.xml \"${params.test_suite}/${params.test_groups}\""

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: 'test_report',
                    reportFiles: 'JTreport/index.html',
                    reportName: 'JT Report'
                ]

                junit 'junit_report.xml'

                archive 'JTwork/**/hs_err_pid*.log'
            }
        }
    }
    post {
        always {
            cleanWs deleteDirs: true, disableDeferredWipeout: true, skipWhenFailed: true
        }
    }
}
